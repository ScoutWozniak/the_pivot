@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Resources;
@using System.Linq;
@using System.Collections.Generic;
@inherits PanelComponent

<root>
	
	<div class="panel customiser">
		<label>Customise</label>
		<div class="sliderholder">
			<label>R</label>
			<SliderControl min="0" max="255" step="1" Value:bind=@R></SliderControl>
		</div>

		<div class="sliderholder">
			<label>G</label>
			<SliderControl min="0" max="255" step="1" Value:bind=@G></SliderControl>
		</div>

		<div class="sliderholder">
			<label>B</label>
			<SliderControl min="0" max="255" step="1" Value:bind=@B></SliderControl>
		</div>

        <div class="holder">
            <div class="hat-holder">
		        <label>@(GetCurrentHat().Name)</label>
		        <label style="font-size: 40px;">@(GetCurrentHat().Description)</label>
            </div>
		<button class="buttonIcon" onclick=@NextHat>arrow_forward</button>
        </div>
		
		<button onclick=@SaveData>Save And Return</button>
	</div>
</root>

@code
{
	public Color SliderColor { get; set; } = new Color();
	public int R { get; set; }
	public int G { get; set; }
	public int B { get; set; }

	CustomisationData data;

	[Property] SubCustomisationComponent SubCust { get; set; }

	[Property] MainMenuComponent MainMenu { get; set; }

	List<HatResource> Hats { get; set; }

	int ActiveHat { get; set; } = 0;

	protected override void OnUpdate()
	{
		base.OnUpdate();
		SubCust.SubColor = new Color(R / 255.0f, G / 255.0f, B / 255.0f);
	}

	protected override void OnEnabled()
	{
		base.OnEnabled();
		data = CustomisationData.Load();

		R = data.R;
		G = data.G;
		B = data.B;
	}

	protected override void OnTreeFirstBuilt()
	{
		base.OnTreeFirstBuilt();
		Hats = ResourceLibrary.GetAll<HatResource>().ToList();

		var custData = CustomisationData.Load();
		if (custData.HatName != "none" && custData.HatName != "")
		{
			ActiveHat = Hats.IndexOf(ResourceLibrary.Get<HatResource>($"data/hats/{custData.HatName}.hat"));
		}
	}

	void SaveData()
	{
		data.R = R;
		data.G = G;
		data.B = B;
		data.HatName = GetCurrentHat().ResourceName;
		CustomisationData.Save(data);
		MainMenu.Enabled = true;
		Enabled = false;
	}

	HatResource GetCurrentHat()
	{
		return Hats.ElementAt(ActiveHat);
	}

	void NextHat()
	{
		ActiveHat++;
		if (ActiveHat == Hats.Count)
			ActiveHat = 0;

		SubCust.SetHat(GetCurrentHat());
	}



	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	//protected override int BuildHash() => System.HashCode.Combine( Hats );
}
