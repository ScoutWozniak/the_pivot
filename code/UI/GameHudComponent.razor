@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits PanelComponent

<root>
	<div class="timerholder">
		@if (!OnBreak())
		{
            @if (UseTime) {
			<label>Time Left: @GetTimeLeft()</label>
            }
		}
		else
		{
			<label>Break Left: @GetTimeLeft()</label>
		}
		<label>$@GetMoney()</label>

		<label>Delivered: @GetCurrentDeliveries() /  @(GetMaxDeliveries())</label>
	</div>

	<div class="grab" >
		<label style="color: @GetGrabColor()">SPACE - GRAB</label>
		@if (CanBoost())
		{
			<label style="color: @GetBoostColor()">SHIFT - BLAST</label>
		}
	</div>
		

</root>

@code
{
    [Property] bool UseTime {get;set;} = true;

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(GetTimeLeft(), GetGrabColor(), GetBoostColor());

    public float GetTimeLeft()
    {
        var manager = Scene.Components.Get<DeliveryManagerComponent>(FindMode.EverythingInSelfAndDescendants);
        if(manager == null)
                return 0.0f;
        float time = manager.GetRoundMaxTime() - manager.RoundTime;
        return MathF.Round(time);
    }

    public bool OnBreak()
    {
        if (Scene.Components.TryGet<DeliveryManagerComponent>(out var check, FindMode.EverythingInSelfAndDescendants))
            return check.IsOnBreak();
        else
            return false;

    }

    float GetMoney()
    {
        return Scene.Components.Get<CashMoney>(FindMode.EverythingInDescendants).Cash;
    }

    bool CanBoost()
    {
        return Scene.Components.Get<UpgradeManager>(FindMode.EverythingInDescendants).CanRocketBoost();
    }

    string GetBoostColor()
    {
        if (!GetPlayer().IsBoosting && GetPlayer().BoostCoolDownDone)
            return "white";
        else
            return "dimgrey";
    }


    bool IsDelivering()
    {
        if (Scene.Components.TryGet<DeliveryManagerComponent>(out var check, FindMode.EverythingInSelfAndDescendants))
            return check.ShiftState == ShiftStates.DELIVERY;
        else
            return false;
    }

    int GetCurrentDeliveries()
    {
        if (Scene.Components.TryGet<DeliveryManagerComponent>(out var check, FindMode.EverythingInSelfAndDescendants))
            return check.GetNumDeliveries() - check.CurrentZones.Count;
        else
            return 0;
    }

    int GetMaxDeliveries()
    {
        if (Scene.Components.TryGet<DeliveryManagerComponent>(out var check, FindMode.EverythingInSelfAndDescendants))
            return check.GetNumDeliveries();
        else
            return 0;
    }

	string GetGrabColor()
	{
		if (GetPlayer().CanGrab)
			return "white";
		else
			return "dimgrey";
	}

	SubmarineComponent GetPlayer()
	{
		return Scene.Components.Get<SubmarineComponent>(FindMode.EverythingInDescendants);
	}
}
